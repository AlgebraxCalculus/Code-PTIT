#include <bits/stdc++.h>

using namespace std;

const int mod = 1e9 + 7;

struct Matrix {
	long long a[2][2];
	Matrix operator * (Matrix other) {
		Matrix res;
		for (int i = 0; i < 2; i++) {
			for (int j = 0; j < 2; j++) {
				res.a[i][j] = 0;
				for (int k = 0; k < 2; k++) {
					res.a[i][j] += (a[i][k] * other.a[k][j]);
					res.a[i][j] %= mod;
				}
			}
		}
		return res;
	}
};

Matrix binPow (Matrix a, int n) {
	if (n == 1) {
		return a;
	}
	Matrix X = binPow(a, n / 2);
	if (n & 1) {
		return X * X * a;
	} else {
		return X * X;
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int t;
	cin >> t;
	while (t--) {
		int n;
		cin >> n;
		Matrix X;
		X.a[0][0] = X.a[0][1] = X.a[1][0] = 1;
		X.a[1][1] = 0;
		Matrix res = binPow(X, n);
		cout << res.a[1][0] << endl;
	}
	return 0;
}
