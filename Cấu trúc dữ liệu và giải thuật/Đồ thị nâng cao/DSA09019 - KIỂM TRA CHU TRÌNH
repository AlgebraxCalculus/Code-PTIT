#include <bits/stdc++.h>

using namespace std;

int n, m;
vector<int> adj[1001];
bool visited[1001];
int parent[1001];

bool DFS (int u) {
	visited[u] = 1;
	for (int v : adj[u]) {
		if (!visited[v]) {
			parent[v] = u;
			if (DFS(v)) {
				return true;
			}
		} else if (v != parent[u]) {
			return true;
		}
	}
	return false;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int t;
	cin >> t;
	while (t--) {
		cin >> n >> m;
		for (int i = 1; i <= n; i++) {
			adj[i].clear();
		}
		for (int i = 0; i < m; i++) {
			int x, y;
			cin >> x >> y;
			adj[x].push_back(y);
			adj[y].push_back(x);
		}
		memset(visited, false, sizeof(visited));
		memset(parent, 0, sizeof(parent));
		bool ok = false;
		for (int i = 1; i <= n; i++) {
			if (!visited[i]) {
				if (DFS(i)) {
					ok = true;
				}
			} 
		}
		if (ok) {
			cout << "YES" << endl;
		} else {
			cout << "NO" << endl;
		}
	}
	return 0;
}
