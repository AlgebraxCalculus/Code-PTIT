#include <bits/stdc++.h>

using namespace std;

int n, m, s;
vector<pair<int, int>> adj[1001];

void Dijkstra (int s) {
	vector<long long> d(n + 1, 1e9);
	d[s] = 0;
	priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
	pq.push({0, s});
	while (!pq.empty()) {
		pair<int, int> top = pq.top();
		pq.pop();
		int kc = top.first, u = top.second;
		if (kc > d[u]) continue;
		for (auto it : adj[u]) {
			int v = it.first, w = it.second;
			if (d[u] + w < d[v]) {
				d[v] = d[u] + w;
				pq.push({d[v], v});
			}
		}
	}
	for (int i = 1; i <= n; i++) {
		cout << d[i] << ' ';
	}
	cout << endl;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int t;
	cin >> t;
	while (t--) {
		cin >> n >> m >> s;
		for (int i = 1; i <= n; i++) {
			adj[i].clear();
		}
		for (int i = 0; i < m; i++) {
			int u, v, w;
			cin >> u >> v >> w;
			adj[u].push_back({v, w});
			adj[v].push_back({u, w});
		}
		Dijkstra(s);
	}
	return 0;
}
