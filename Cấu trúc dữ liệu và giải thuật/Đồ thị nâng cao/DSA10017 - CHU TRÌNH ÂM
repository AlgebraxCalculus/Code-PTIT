#include <bits/stdc++.h>

using namespace std;

struct Edge {
	int u, v, w;
};

int n, m;
vector<Edge> canh;

bool BellmanFord (int s) {
	vector<long long> d(n + 1, 1e9);
	d[s] = 0;
	for (int i = 1; i < n; i++) {
		for (auto e : canh) {
			int u = e.u;
			int v = e.v;
			int w = e.w;
			if (d[u] != 1e9 && d[u] + w < d[v]) {
				d[v] = d[u] + w;
			}
		}
	}
	for (auto e : canh) {
		int u = e.u;
		int v = e.v;
		int w = e.w;
		if (d[u] != 1e9 && d[u] + w < d[v]) {
			return true;
		}
	}
	return false;
}

void solve() {
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		int x, y, w;
		cin >> x >> y >> w;
		Edge e = Edge{x, y, w};
		canh.push_back(e);
	}
	for (int i = 1; i <= n; i++) {
		if (BellmanFord(i)) {
			cout << 1 << endl;
			return;
		} 	
	}
	cout << 0 << endl;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int t;
	cin >> t;
	while (t--) {
		solve();
		canh.clear();
	}
	return 0;
}
