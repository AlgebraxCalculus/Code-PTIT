#include <bits/stdc++.h>

using namespace std;

struct Edge {
	int u, v, w;
};

int n, m;
int parent[1001], size[1001];
vector<Edge> canh;

void make_set() {
	for (int i = 1; i <= n; i++) {
		parent[i] = i;
		size[i] = 1;
	}
}

int find (int v) {
	if (v == parent[v]) {
		return v;
	}
	return parent[v] = find(parent[v]);
}

bool Union (int a, int b) {
	a = find(a);
	b = find(b);
	if (a == b) {
		return false; 
	}
	if (a[size] < b[size]) {
		swap(a, b);
	}
	parent[b] = a;
	a[size] += b[size];
	return true;
}

bool cmp (Edge a, Edge b) {
	return a.w < b.w;
}

void Kruskal() {
	vector<Edge> mst;
	int d = 0; 
	sort(canh.begin(), canh.end(), cmp); 
	for (int i = 0; i < m; i++) {
		if (mst.size() == n - 1) break;
		Edge e = canh[i];
		if (Union(e.u, e.v)) {
			mst.push_back(e);
			d += e.w;
		}
	}
	cout << d << endl;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int t;
	cin >> t;
	while (t--) {
		cin >> n >> m;
		for (int i = 0; i < m; i++) {
			int x, y, w;
			cin >> x >> y >> w;
			Edge e = Edge{x, y, w};
			canh.push_back(e);
		}
		make_set();
		Kruskal();
		canh.clear();
	}
	return 0;
}
