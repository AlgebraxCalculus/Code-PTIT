#include <bits/stdc++.h>

using namespace std;

struct TreeNode {
    int data;
    TreeNode* left;
    TreeNode* right;
};

typedef struct TreeNode* node;

node makeNode (int x) {
    node newNode = new TreeNode();
    newNode->data = x;
    newNode->left = newNode->right = NULL;
    return newNode;
}

int search (int a[], int s, int t, int x) {
	for (int i = s; i <= t; i++) {
		if (a[i] == x) {
			return i;
		}
	}
	return -1;
}

node buildTree (int in[], int lv[], int inStart, int inEnd, int n) {
    if (inStart > inEnd) {
        return NULL;
    }
    node root = makeNode(lv[0]);
    if (inStart == inEnd) {
        return root;
    }
    int inIndex = search(in, inStart, inEnd, root->data);
    int left_level[n] = {0}, right_level[n] = {0};
    int l = 0, r = 0;
    for (int i = 1; i < n; i++) {
        if (search(in, inStart, inIndex - 1, lv[i]) != -1) {
        	left_level[l++] = lv[i];
		} else {
			right_level[r++] = lv[i];
		}
    }
    root->left = buildTree(in, left_level, inStart, inIndex - 1, inIndex - inStart);
    root->right = buildTree(in, right_level, inIndex + 1, inEnd, inEnd - inIndex);
    return root;
}

void postOrder (node root) {
    if (root == NULL) {
        return;
    }
    postOrder(root->left);
    postOrder(root->right);
    cout << root->data << ' ';
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        node root = NULL;
        int in[n], lv[n];
        for (int i = 0; i < n; i++) {
            cin >> in[i];
        }
        for (int i = 0; i < n; i++) {
            cin >> lv[i];
        }
        root = buildTree(in, lv, 0, n - 1, n);
        postOrder(root);
        cout << endl;
    }
    return 0;
}
