#include <bits/stdc++.h>

using namespace std;

struct TreeNode {
	int data;
	TreeNode* left;
	TreeNode* right;
};

typedef struct TreeNode* node;

node makeNode (int x) {
	node newNode = new TreeNode();
	newNode->data = x;
	newNode->left = newNode->right = NULL;
	return newNode;
}

void buildTree (node root, int a, int b, char x) {
	if (root == NULL) {
		return;
	}
	if (root->data == a) {
		if (x == 'L') {
			root->left = makeNode(b);
		} else if (x == 'R') {
			root->right = makeNode(b);
		}
	}
	buildTree(root->left, a, b, x);
	buildTree(root->right, a, b, x);
}

void printSpiralOrder (node root) {
	if (root == NULL) {
		return;
	}
	stack<node> s1, s2;
	s1.push(root);
	while (!s1.empty() || !s2.empty()) {
		while (!s1.empty()) {
			node top1 = s1.top();
			cout << top1->data << ' ';
			s1.pop();
			if (top1->right != NULL) {
				s2.push(top1->right);
			}
			if (top1->left != NULL) {
				s2.push(top1->left);
			}
		}
		while (!s2.empty()) {
			node top2 = s2.top();
			cout << top2->data << ' ';
			s2.pop();
			if (top2->left != NULL) {
				s1.push(top2->left);
			}
			if (top2->right != NULL) {
				s1.push(top2->right);
			}
		}
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int t;
	cin >> t;
	while (t--) {
		int n;
		cin >> n;
		node root = NULL;
		for (int i = 0; i < n; i++) {
			int a, b;
			char x;
			cin >> a >> b >> x;
			if (root == NULL) {
				root = makeNode(a);
			}
			buildTree(root, a, b, x);
		}
		printSpiralOrder(root);
		cout << endl;
	}
	return 0;
}
