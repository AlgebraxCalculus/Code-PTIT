#include <bits/stdc++.h>

using namespace std;

int LPS (string s) {
	int n = s.size();
	int dp[n][n];
	for (int i = 0; i < n; i++) {
		dp[i][i] = 1;
	}
	for (int length = 2; length <= n; length++) {
		for (int i = 0; i < n - length + 1; i++) {
			int j = i + length - 1;
			if (length == 2 && (s[i] == s[j])) {
				dp[i][j] = 2;
			} else if (s[i] == s[j]) {
				dp[i][j] = dp[i + 1][j - 1] + 2; 
			} else {
				dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
			}
		}
	}
	return dp[0][n - 1]; 
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int t;
	cin >> t;
	while (t--) {
		string s;
		cin >> s;
		cout << s.size() - LPS(s) << endl;
	}
	return 0;
}
