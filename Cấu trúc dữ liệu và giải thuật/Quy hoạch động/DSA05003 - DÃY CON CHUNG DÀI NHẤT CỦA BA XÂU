#include <bits/stdc++.h>

using namespace std;

int LCS (string a, string b, string c, int n, int m, int p) {
	int dp[n + 1][m + 1][p + 1];
	for (int i = 0; i <= n; i++) {
		for (int j = 0; j <= m; j++) {
			for (int k = 0; k <= p; k++) {
				if (i == 0 || j == 0 || k == 0) {
					dp[i][j][k] = 0;
				} else if (a[i - 1] == b[j - 1] && b[j - 1] == c[k - 1]) {
					dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;
				} else {
					dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));
				}
			}
		}
	}
	return dp[n][m][p];
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int t;
	cin >> t;
	while (t--) {
		int n, m, p;
		cin >> n >> m >> p;
		string a, b, c;
		cin >> a >> b >> c;
		cout << LCS(a, b, c, n, m, p) << endl;
	}
	return 0;
}
