#include <bits/stdc++.h>

using namespace std;

int n, m;
char a[1001][1001];
bool visited[1001][1001];
int dx[8] = {-1, -1, -1, 0, 0, 1, 1, 1};
int dy[8] = {-1, 0, 1, -1, 1, -1, 0, 1};

void BFS (int i, int j) {
	queue<pair<int, int>> q;
	q.push({i, j});
	visited[i][j] = true;
	while (!q.empty()) {
		pair<int, int> top = q.front();
		q.pop();
		for (int k = 0; k < 8; k++) {
			int i1 = top.first + dx[k];
			int j1 = top.second + dy[k];
			if (i1 >= 1 && i1 <= n && j1 >= 1 && j1 <= m && a[i1][j1] == 'W' && !visited[i1][j1]) {
				q.push({i1, j1});
				visited[i1][j1] = true;
			}
		}
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cin >> n >> m;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			cin >> a[i][j];
		}
	}
	int ans = 0;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			if (a[i][j] == 'W' && !visited[i][j]) {
				ans++;
				BFS(i, j);
			}
		}
	}
	cout << ans;
	return 0;
}
