#include <bits/stdc++.h>

using namespace std;

int dx[8] = {-1, -1, -1, 0, 0, 1, 1, 1};
int dy[8] = {-1, 0, 1, -1, 1, -1, 0, 1};
bool visited[1001][1001];
int a[1001][1001], n, m;

void DFS (int i, int j) {
	visited[i][j] = true;
	for (int k = 0; k < 8; k++) {
		int i1 = i + dx[k];
		int j1 = j + dy[k];
		if (i1 >= 1 && i1 <= n && j1 >= 1 && j1 <= m && a[i1][j1] && !visited[i1][j1]) {
			DFS(i1, j1);
		}
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int t;
	cin >> t;
	while (t--) {
		cin >> n >> m;
		memset(a, 0, sizeof(a));
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= m; j++) {
				cin >> a[i][j];
			}
		} 
		memset(visited, false, sizeof(visited));
		int cnt = 0;
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= m; j++) {
				if (a[i][j] && !visited[i][j]) {
					DFS(i, j);
					cnt++;
				}
			}
		}
		cout << cnt << endl;
	}
	return 0;
}
