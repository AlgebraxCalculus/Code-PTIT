#include <bits/stdc++.h>

using namespace std;

int n, m, dau, cuoi;
vector<int> adj[1001];
bool visited[1001];
int parent[1001];

void input() {
    cin >> n >> m;
    for (int i = 1; i <= n; i++) {
        adj[i].clear();
    }
    for (int i = 0; i < m; i++) {
        int x, y;
        cin >> x >> y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
    for (int i = 1; i <= n; i++) {
    	sort(adj[i].begin(), adj[i].end());
	}
}

bool DFS (int u) {
    visited[u] = true;
    for (int v : adj[u]) {
        if (!visited[v]) {
            parent[v] = u;
            if (DFS(v)) {
                return true;
            }
        } else if (v != parent[u] && v == 1) {
           	cuoi = u;
            return true;
        }
    }
    return false;
}

void solve() {
    input();
    memset(visited, false, sizeof(visited));
    memset(parent, 0, sizeof(parent));
    dau = 1, cuoi = 0;
    if (!DFS(1)) {
        cout << "NO" << endl;
        return;
    }
    vector<int> cycle;
    cycle.push_back(dau);
    while (cuoi != dau) {
    	cycle.push_back(cuoi);
    	cuoi = parent[cuoi];
	}
	cycle.push_back(dau);
	reverse(cycle.begin(), cycle.end());
	for (int x : cycle) {
		cout << x << ' ';
	}
	cout << endl;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
    return 0;
}
