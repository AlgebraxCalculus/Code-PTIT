#include <bits/stdc++.h>

using namespace std;

int n, m;
int a[101][101];
vector<int> ans;
bool visited[101][101];
int dx[4] = {-1, 0, 0, 1};
int dy[4] = {0, -1, 1, 0};

int BFS (int i, int j) {
	queue<pair<int, int>> q;
	q.push({i, j});
	visited[i][j] = true;
	int cnt = 0;
	while (!q.empty()) {
		pair<int, int> top = q.front();
		q.pop();
		for (int k = 0; k < 4; k++) {
			int i1 = top.first + dx[k];
			int j1 = top.second + dy[k];
			if (i1 >= 0 && i1 < n && j1 >= 0 && j1 < m) {
				if (a[i1][j1] && !visited[i1][j1]) {
					q.push({i1, j1});
					visited[i1][j1] = true;
				} else if (a[i1][j1] == 0) {
					cnt++;
				}
			} else{
				cnt++;
			}
		}
	}
	return cnt;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> a[i][j];
		}
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (a[i][j] && !visited[i][j]) {
				ans.push_back(BFS(i, j));
			}
		}
	}
	for (int x : ans) {
		cout << x << ' ';
	}
	return 0;
}
