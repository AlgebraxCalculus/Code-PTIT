#include <bits/stdc++.h>

using namespace std;

class Fraction {
	public:
		long long tu, mau;
		Fraction(long long tu, long long mau);
		friend ostream& operator << (ostream&, Fraction);
		friend istream& operator >> (istream&, Fraction&);
		friend Fraction operator + (Fraction, Fraction);
};

Fraction::Fraction(long long tu, long long mau) {
	this->tu = tu;
	this->mau = mau;
}
ostream& operator << (ostream& out, Fraction a) {
	out << a.tu << '/' << a.mau << endl;
	return out;
}
istream& operator >> (istream& in, Fraction& a) {
	in >> a.tu >> a.mau;
	return in;
}

long long lcm (long long a, long long b) {
	return (a * b) / __gcd(a, b);
}
Fraction operator + (Fraction a, Fraction b) {
	Fraction tong(1, 1);
	long long mauchung = lcm(a.mau, b.mau);
	tong.tu = (mauchung / a.mau * a.tu) + (mauchung / b.mau * b.tu);
	tong.mau = mauchung;
	long long uocchung = __gcd(tong.tu, tong.mau);
	tong.tu /= uocchung;
	tong.mau /= uocchung;
	return tong;
}

int main() {
	Fraction p(1, 1), q(1, 1);
	cin >> p >> q;
	cout << p + q;
	return 0;
}
