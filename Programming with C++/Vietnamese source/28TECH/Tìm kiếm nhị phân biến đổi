/* Tìm vị trí xuất hiện đầu tiên của phần tử X trong mảng, nếu không tồn tại X in ra -1.
Tìm vị trí xuất hiện cuối cùng của phần tử X trong mảng, nếu không tồn tại X in ra -1.
Tìm vị trí xuất hiện đầu tiên của phần tử >= X trong mảng, nếu không tồn tại phần tử >=X in ra -1.
Tìm vị trí xuất hiện đầu tiên của phần tử > X trong mảng, nếu không tồn tại phần tử >X in ra -1.
Tìm số lần xuất hiện của phần tử X trong mảng sử dụng kết quả của hàm 1 và 2. */

#include <bits/stdc++.h>

using namespace std;

int first(int a[], int n, int x) {
    int l = 0, r = n - 1, res = -1;
    while (l <= r) {
        int m = (l + r) / 2;
        if (a[m] == x) {
            r = m - 1;
            res = m;
        } else if (a[m] > x) {
            r = m - 1;
        } else {
            l = m + 1;
        }
    }
    return res;
}

int last(int a[], int n, int x) {
    int l = 0, r = n - 1, res = -1;
    while (l <= r) {
        int m = (l + r) / 2;
        if (a[m] == x) {
            res = m;
            l = m + 1;
        } else if (a[m] > x) {
            r = m - 1;
        } else {
            l = m + 1;
        }
    }
    return res;
}

int lower_bound (int a[], int n, int x) {
    int l = 0, r = n - 1, res = -1;
    while (l <= r) {
        int m = (l + r) / 2;
        if (a[m] >= x) {
            res = m;
            r = m - 1;
        } else {
            l = m + 1;
        }
    }
    return res;
}

int upper_bound(int a[], int n, int x) {
    int l = 0, r = n - 1, res = -1;
    while (l <= r) {
        int m = (l + r) / 2;
        if (a[m] > x) {
            res = m;
            r = m - 1;
        } else {
            l = m + 1;
        }
    }
    return res;
}

int distance (int a[], int n, int x) {
    if (first(a, n, x) != -1) {
        return last(a, n, x) - first(a, n, x) + 1;
    }
    return 0;
}

int main() {
    int n, x;
    cin >> n >> x;
    int a[n];
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    cout << first(a, n, x) << endl << last(a, n, x) << endl << lower_bound(a, n, x) << endl << upper_bound(a, n, x) << endl << distance(a, n, x);
    return 0;
}
